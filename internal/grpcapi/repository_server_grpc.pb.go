// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: repository_server.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlinkDiskRepository_Session_FullMethodName = "/blinkdisk_repository.BlinkDiskRepository/Session"
)

// BlinkDiskRepositoryClient is the client API for BlinkDiskRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlinkDiskRepositoryClient interface {
	// Session starts a long-running repository session.
	Session(ctx context.Context, opts ...grpc.CallOption) (BlinkDiskRepository_SessionClient, error)
}

type blinkdiskRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewBlinkDiskRepositoryClient(cc grpc.ClientConnInterface) BlinkDiskRepositoryClient {
	return &blinkdiskRepositoryClient{cc}
}

func (c *blinkdiskRepositoryClient) Session(ctx context.Context, opts ...grpc.CallOption) (BlinkDiskRepository_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlinkDiskRepository_ServiceDesc.Streams[0], BlinkDiskRepository_Session_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blinkdiskRepositorySessionClient{stream}
	return x, nil
}

type BlinkDiskRepository_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionResponse, error)
	grpc.ClientStream
}

type blinkdiskRepositorySessionClient struct {
	grpc.ClientStream
}

func (x *blinkdiskRepositorySessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blinkdiskRepositorySessionClient) Recv() (*SessionResponse, error) {
	m := new(SessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlinkDiskRepositoryServer is the server API for BlinkDiskRepository service.
// All implementations must embed UnimplementedBlinkDiskRepositoryServer
// for forward compatibility
type BlinkDiskRepositoryServer interface {
	// Session starts a long-running repository session.
	Session(BlinkDiskRepository_SessionServer) error
	mustEmbedUnimplementedBlinkDiskRepositoryServer()
}

// UnimplementedBlinkDiskRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedBlinkDiskRepositoryServer struct {
}

func (UnimplementedBlinkDiskRepositoryServer) Session(BlinkDiskRepository_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedBlinkDiskRepositoryServer) mustEmbedUnimplementedBlinkDiskRepositoryServer() {}

// UnsafeBlinkDiskRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlinkDiskRepositoryServer will
// result in compilation errors.
type UnsafeBlinkDiskRepositoryServer interface {
	mustEmbedUnimplementedBlinkDiskRepositoryServer()
}

func RegisterBlinkDiskRepositoryServer(s grpc.ServiceRegistrar, srv BlinkDiskRepositoryServer) {
	s.RegisterService(&BlinkDiskRepository_ServiceDesc, srv)
}

func _BlinkDiskRepository_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlinkDiskRepositoryServer).Session(&blinkdiskRepositorySessionServer{stream})
}

type BlinkDiskRepository_SessionServer interface {
	Send(*SessionResponse) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type blinkdiskRepositorySessionServer struct {
	grpc.ServerStream
}

func (x *blinkdiskRepositorySessionServer) Send(m *SessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blinkdiskRepositorySessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlinkDiskRepository_ServiceDesc is the grpc.ServiceDesc for BlinkDiskRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlinkDiskRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blinkdisk_repository.BlinkDiskRepository",
	HandlerType: (*BlinkDiskRepositoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _BlinkDiskRepository_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "repository_server.proto",
}
